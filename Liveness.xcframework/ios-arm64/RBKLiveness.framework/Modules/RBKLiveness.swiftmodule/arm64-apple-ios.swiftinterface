// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RBKLiveness
import AVFoundation
import CoreVideo
import DeveloperToolsSupport
import Foundation
@_exported import RBKLiveness
import Swift
import SwiftUI
import UIKit.UIImage
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum RBKLivenessAlert : Swift.Int {
  case faceNotFound
  case singleFace
  case straightHeadOpenEyes
  case headOutOfBounds
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum RBKLivenessMessage {
  case succeeded
  case alert(RBKLiveness.RBKLivenessAlert)
  case pass(RBKLiveness.RBKLivenessAction)
  case passed(RBKLiveness.RBKLivenessResult)
  case imageCaptureError
}
@objc public protocol RBKLivenessDataSource {
  @objc func liveness(textForAlert alert: RBKLiveness.RBKLivenessAlert) -> Swift.String?
  @objc func liveness(textForAction action: RBKLiveness.RBKLivenessAction) -> Swift.String?
  @objc func liveness(descriptionTextForAction action: RBKLiveness.RBKLivenessAction) -> Swift.String?
  @objc func liveness(textForPassedAction action: RBKLiveness.RBKLivenessAction) -> Swift.String?
}
extension RBKLiveness.RBKLivenessDataSource {
  public func liveness(textForAlert alert: RBKLiveness.RBKLivenessAlert) -> Swift.String?
  public func liveness(textForAction action: RBKLiveness.RBKLivenessAction) -> Swift.String?
  public func liveness(descriptionTextForAction action: RBKLiveness.RBKLivenessAction) -> Swift.String?
  public func liveness(textForPassedAction action: RBKLiveness.RBKLivenessAction) -> Swift.String?
}
@objc @_hasMissingDesignatedInitializers public class RBKLivenessResult : ObjectiveC.NSObject {
  @objc final public let action: RBKLiveness.RBKLivenessAction
  @objc final public let image: UIKit.UIImage?
  @objc deinit
}
@objc public protocol RBKLivenessDelegate {
  @objc func liveness(didCaptureFaceIn image: UIKit.UIImage)
  @objc func liveness(willPassAction action: RBKLiveness.RBKLivenessAction)
  @objc func liveness(didPassActionWith result: RBKLiveness.RBKLivenessResult)
  @objc func liveness(didRecordVideoTo url: Foundation.URL)
  @objc func livenessDidSucceed()
}
extension RBKLiveness.RBKLivenessDelegate {
  public func liveness(willPassAction action: RBKLiveness.RBKLivenessAction)
  public func liveness(didRecordVideoTo url: Foundation.URL)
}
@objc public enum RBKLivenessAction : Swift.Int {
  case smile
  case turnLeft
  case turnRight
  case tiltLeft
  case tiltRight
  case blink
  case openMouth
  case sayWord
  public static func generate() -> [RBKLiveness.RBKLivenessAction]
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RBKLivenessViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any RBKLiveness.RBKLivenessDelegate)?
  @objc @_Concurrency.MainActor(unsafe) weak public var dataSource: (any RBKLiveness.RBKLivenessDataSource)?
  @objc @_Concurrency.MainActor(unsafe) public var shouldSetMaxBrightness: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var titleColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) public var loadingText: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public init(isRecordingEnabled: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension RBKLiveness.RBKLivenessViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var titleFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var descriptionFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var descriptionColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var activityIndicatorColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isActivityIndicatorLoading: Swift.Bool {
    @objc get
    @objc set
  }
}
extension RBKLiveness.RBKLivenessAlert : Swift.Equatable {}
extension RBKLiveness.RBKLivenessAlert : Swift.Hashable {}
extension RBKLiveness.RBKLivenessAlert : Swift.RawRepresentable {}
extension RBKLiveness.RBKLivenessAction : Swift.Equatable {}
extension RBKLiveness.RBKLivenessAction : Swift.Hashable {}
extension RBKLiveness.RBKLivenessAction : Swift.RawRepresentable {}
